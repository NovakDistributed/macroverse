{
  "contractName": "TestnetMRVToken",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "sendProceedsTo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sendTokensTo",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "CrowdsaleClose",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "CrowdsaleOpen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "newDecimals",
          "type": "uint8"
        }
      ],
      "name": "DecimalChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "etherAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "TokenPurchase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkCloseTimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkOpenTimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearCrowdsaleCloseTimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearCrowdsaleOpenTimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeCrowdsale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeTimer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeTimerElapsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCrowdsaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCrowdsaleSupplyInWholeTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openCrowdsale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openTimer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openTimerElapsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        }
      ],
      "name": "reclaimContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reclaimEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        }
      ],
      "name": "reclaimToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minutesFromNow",
          "type": "uint256"
        }
      ],
      "name": "setCrowdsaleCloseTimerFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minutesFromNow",
          "type": "uint256"
        }
      ],
      "name": "setCrowdsaleOpenTimerFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "newDecimals",
          "type": "uint8"
        }
      ],
      "name": "setDecimals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxInWholeTokens",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "tokenFallback",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wholeTokensPerEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wholeTokensReserved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"sendProceedsTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendTokensTo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newDecimals\",\"type\":\"uint8\"}],\"name\":\"DecimalChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkCloseTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkOpenTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearCrowdsaleCloseTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearCrowdsaleOpenTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeCrowdsale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTimerElapsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCrowdsaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCrowdsaleSupplyInWholeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openCrowdsale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTimerElapsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"reclaimContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minutesFromNow\",\"type\":\"uint256\"}],\"name\":\"setCrowdsaleCloseTimerFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minutesFromNow\",\"type\":\"uint256\"}],\"name\":\"setCrowdsaleOpenTimerFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newDecimals\",\"type\":\"uint8\"}],\"name\":\"setDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxInWholeTokens\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wholeTokensPerEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wholeTokensReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds. return A uint256 specifing the amount of tokens still avaible for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.  return An uint256 representing the amount owned by the passed address.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"reclaimContract(address)\":{\"details\":\"Reclaim ownership of Ownable contracts\",\"params\":{\"contractAddr\":\"The address of the Ownable to be reclaimed.\"}},\"reclaimToken(address)\":{\"details\":\"Reclaim all IERC20 compatible tokens\",\"params\":{\"tokenAddr\":\"address The address of the token contract\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"tokenFallback(address,uint256,bytes)\":{\"details\":\"Reject all ERC23 compatible tokens\"},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint256 the amout of tokens to be transfered\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{\"checkCloseTimer()\":{\"notice\":\"If the close timer has elapsed, stop the crowdsale.\"},\"checkOpenTimer()\":{\"notice\":\"If the open timer has elapsed, start the crowdsale. Can be called by people, but also gets called when people try to contribute.\"},\"clearCrowdsaleCloseTimer()\":{\"notice\":\"Let the owner stop the crowdsale close timer, as long as it has not yet expired.\"},\"clearCrowdsaleOpenTimer()\":{\"notice\":\"Let the owner stop the crowdsale open timer, as long as the crowdsale has not yet opened.\"},\"closeCrowdsale()\":{\"notice\":\"Allow the owner to end the crowdsale manually.\"},\"closeTimerElapsed()\":{\"notice\":\"Determine if the crowdsale should close by timer.\"},\"constructor\":\"Make a new TestnetMRVToken. Passes through arguments to the base MRVToken constructor.\",\"isCrowdsaleActive()\":{\"notice\":\"Determine if the crowdsale is currently happening.\"},\"mint(uint256)\":{\"notice\":\"Allow anyone to mint themselves any amount of tokens, for testing. Unless it's truly huge and going to DoS the contract by pegging total supply.\"},\"openCrowdsale()\":{\"notice\":\"Allow the owner to start the crowdsale manually.\"},\"openTimerElapsed()\":{\"notice\":\"Determine if the crowdsale should open by timer.\"},\"reclaimEther()\":{\"notice\":\"If Ether somehow manages to get into this contract, provide a way to get it out again. During normal crowdsale operation, ETH is immediately forwarded to the beneficiary.\"},\"setCrowdsaleCloseTimerFor(uint256)\":{\"notice\":\"Let the owner start the timer for the crowdsale end. Counts from when the function is called, *not* from the start of the crowdsale. It is possible, but a bad idea, to set this before the open timer.\"},\"setCrowdsaleOpenTimerFor(uint256)\":{\"notice\":\"Let the owner start the timer for the crowdsale start. Without further owner intervention, anyone will be able to open the crowdsale when the timer expires. Further calls will re-set the timer to count from the time the transaction is processed. The timer can be re-set after it has tripped, unless someone has already opened the crowdsale.\"},\"setDecimals(uint8)\":{\"notice\":\"When the crowdsale is finished, the contract owner may adjust the decimal places for display purposes. This should work like a 10-to-1 split or reverse-split. The point of this mechanism is to keep the individual MRV tokens from getting inconveniently valuable or cheap. However, it relies on the contract owner taking the time to update the decimal place value. Note that this changes the decimals IMMEDIATELY with NO NOTICE to users.\"},\"setMaxSupply(uint256)\":{\"notice\":\"Before the crowdsale opens, the max token count can be configured.\"}},\"notice\":\"MRVToken contract which adds unrestricted minting by anyone. Only useful on a testnet.\"}},\"settings\":{\"compilationTarget\":{\"/home/anovak/workspace/macroverse/contracts/TestnetMRVToken.sol\":\"TestnetMRVToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/anovak/workspace/macroverse/contracts/HasNoContracts.sol\":{\"keccak256\":\"0x9fc0b6fb78952f6574d76c8326d34cb240078fb6955f6741e0353f47ad52307a\",\"urls\":[\"bzz-raw://f81e0bd89c2e7749ca610ccee4f08057177193a41fd718f1469c195af836596e\",\"dweb:/ipfs/QmT15knS5M1rCR6tVRVgbNzrFC89LNW6iJJMov7TcWSZyF\"]},\"/home/anovak/workspace/macroverse/contracts/HasNoTokens.sol\":{\"keccak256\":\"0x1ec94caeb2deddc95a10be6c186e1bd42357b982e7568a8d50c3109bcc9a0f5e\",\"urls\":[\"bzz-raw://79fbd7b185a9062bb26a5229a3e022fa5b59d7eae5332e138bb2f222fe971e55\",\"dweb:/ipfs/QmZG8C8tD1P7xKoKU6KYnV91y5bW186vJJ92rhw3TGU11t\"]},\"/home/anovak/workspace/macroverse/contracts/MRVToken.sol\":{\"keccak256\":\"0x546d36156f0fb016b38662a7cea4e12518624773f8ef6e649b4f8321cfb090f8\",\"urls\":[\"bzz-raw://b35a9eebd651ddf1814221e2c78fbe18760a826535cf29c18745a42c2215eff3\",\"dweb:/ipfs/QmUbyY5Fkhmukomssp3goY5vwZHU9CHS9EkmJ3DwRvLi62\"]},\"/home/anovak/workspace/macroverse/contracts/OZ1BasicToken.sol\":{\"keccak256\":\"0xf8d21fa1302ed765dc59470f5045e87f56bcc3ce65de4767ca15bb26b486bb32\",\"urls\":[\"bzz-raw://635f1c652c80a873b8820103c9109d672b5fb70e93a2457efd7ce4690870ea51\",\"dweb:/ipfs/QmYJskdc1ePNVRyno4YDdntXCcmYS5jHmB4tjWBYUwcJDe\"]},\"/home/anovak/workspace/macroverse/contracts/OZ1ERC20.sol\":{\"keccak256\":\"0x46a8c18027eb2784658af0d3ccdfa59675b1faefd5339ac3f85d2dda6064a20f\",\"urls\":[\"bzz-raw://f89e95707b2705c5eb835ec01669a8d1f5faa59fa9983364eedf1b93e48e9425\",\"dweb:/ipfs/QmSTfebVyG9nm5SvGZK69JstGSqD8g7C7Mp7UkTvmegT8Y\"]},\"/home/anovak/workspace/macroverse/contracts/OZ1ERC20Basic.sol\":{\"keccak256\":\"0xa847a427764bb9888383ab665603d9e019d58acd13628dd6badb40bb7a0ea2b4\",\"urls\":[\"bzz-raw://de4f7f46ad7957d41c35746793da3cee2b8eb99638bb2bd3168724be06e3808b\",\"dweb:/ipfs/QmV5DH423c9Z4Ns7URE3FdrqWTDMa7sa2rsGpWprb2im1T\"]},\"/home/anovak/workspace/macroverse/contracts/OZ1StandardToken.sol\":{\"keccak256\":\"0x9195d9e4db9c5405dbed4ac0306df63df4d7d0fddd2436925655ee9d804d1171\",\"urls\":[\"bzz-raw://32654badddd4744003f6cab29269d3859fa35959497d69f281097f60d36d0b4e\",\"dweb:/ipfs/QmR5k4VukgnjQpvjbwLuUf5WsU1xrXatu3iGQ7gBpKTHhP\"]},\"/home/anovak/workspace/macroverse/contracts/TestnetMRVToken.sol\":{\"keccak256\":\"0xdedee46570f0dd897c7fe77e1e6b96537f4e077e2c698dfdcefb2dd767718fac\",\"urls\":[\"bzz-raw://4c845303cb950d0d00fd8b14fa3e974f62cb2c5502e86be66a2361ed3859364a\",\"dweb:/ipfs/QmQQVS4UjFCohXDuwNfP8USjs3aV5E8Dk4191mHMkFdcih\"]},\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"keccak256\":\"0x310e66ba9e43bfd0bc6110c06e4c98e86e8515a85a295031413931fafb347b92\",\"urls\":[\"bzz-raw://8e061529b96bf38743c4ea16b44d53e145b3f16ec0a68151b1a690f348aad944\",\"dweb:/ipfs/QmR2hKcGi5NUNp1bWvjwvdv6J71ySp7ih5Ey3WxWkiRWh8\"]},\"openzeppelin-solidity/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa8b9207237f43e1af0feb1423db95cabf05989b89ff0d903b148a6f01856253f\",\"urls\":[\"bzz-raw://94271c7aeba6023ca590bcd32b59328ce78eefb55f0792fc87bd2c9720f45c2c\",\"dweb:/ipfs/QmXbG6dvnSqLvAXUVK9d26Sfi9d2kFtpxpo7mAuQYhKXPN\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x9f5f241611b89edba99d342a5e826697c2bf26a567cd51b20e991344511b23b6\",\"urls\":[\"bzz-raw://dc9566acec64b1816d4f003928b3da56affd8dcd3385c7ef645ee1854acdc41b\",\"dweb:/ipfs/QmafEvnB89VjQTAtFqoHSYvgSABPkGgxkYnW4YbpmYDhxS\"]},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xcd7d59a57b078b399972308a44ad467d62d95a2924ae358b9acedad1b9bdf6ae\",\"urls\":[\"bzz-raw://c64b13b4abe515fd954cda736943c159e403934c17bcec70dc3b004f5832d369\",\"dweb:/ipfs/QmY5uk3UmEBAzPU36oPB2VAAMxVrcQs74MKnA3VmRFhdrN\"]}},\"version\":1}",
  "bytecode": "0x60806040526000600755600060085534801561001a57600080fd5b50604051611ac8380380611ac88339818101604052604081101561003d57600080fd5b5080516020909101518181600061005b6001600160e01b0361014a16565b600380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600480546001600160a01b0319166001600160a01b039384161790556003805460ff60a01b1916600960a11b17905569010f0cf064dd59200000600081815591831682526001602090815260408084208390556006805461ffff191690556305f5e100600555805192835251938516937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3505061014e565b3390565b61196b8061015d6000396000f3fe6080604052600436106102085760003560e01c8063715018a6116101185780639f727c27116100a0578063dd3260fc1161006f578063dd3260fc14610723578063dd62ed3e14610738578063e330a73714610773578063ea6636311461079d578063f2fde38b146107b25761024c565b80639f727c2714610619578063a0712d681461062e578063a9059cbb14610658578063c0ee0b8a146106915761024c565b80638490d598116100e75780638490d5981461048c5780638da5cb5b146105a957806392f351f9146105da57806395d89b41146105ef578063983c0a01146106045761024c565b8063715018a61461052857806379d220ae1461053d5780637a1395aa1461056757806380f4531f146105945761024c565b806328ef6f401161019b5780634e15dfe91161016a5780634e15dfe91461048c5780635da24f90146104a15780636d6e2710146104b65780636f8b44b0146104cb57806370a08231146104f55761024c565b806328ef6f40146104045780632aed7f3f14610419578063313ce5671461044c578063346fc0dd146104775761024c565b806317ffc320116101d757806317ffc3201461035257806318160ddd146103855780631f4425f3146103ac57806323b872dd146103c15761024c565b80630118e6861461025157806306fdde031461027a578063095ea7b3146103045780630d051c521461033d5761024c565b3661024c576102156107e5565b61021d61083a565b600654610100900460ff161561023257600080fd5b60065460ff1661024157600080fd5b61024a33610890565b005b600080fd5b34801561025d57600080fd5b506102666109da565b604080519115158252519081900360200190f35b34801561028657600080fd5b5061028f610a18565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102c95781810151838201526020016102b1565b50505050905090810190601f1680156102f65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561031057600080fd5b5061024a6004803603604081101561032757600080fd5b506001600160a01b038135169060200135610a44565b34801561034957600080fd5b5061024a610ae1565b34801561035e57600080fd5b5061024a6004803603602081101561037557600080fd5b50356001600160a01b0316610b5d565b34801561039157600080fd5b5061039a610cc6565b60408051918252519081900360200190f35b3480156103b857600080fd5b5061024a61083a565b3480156103cd57600080fd5b5061024a600480360360608110156103e457600080fd5b506001600160a01b03813581169160208101359091169060400135610ccc565b34801561041057600080fd5b5061024a610de4565b34801561042557600080fd5b5061024a6004803603602081101561043c57600080fd5b50356001600160a01b0316610e9b565b34801561045857600080fd5b50610461610f6f565b6040805160ff9092168252519081900360200190f35b34801561048357600080fd5b5061039a610f7f565b34801561049857600080fd5b5061039a610f85565b3480156104ad57600080fd5b5061039a610f8b565b3480156104c257600080fd5b5061024a610f91565b3480156104d757600080fd5b5061024a600480360360208110156104ee57600080fd5b5035611008565b34801561050157600080fd5b5061039a6004803603602081101561051857600080fd5b50356001600160a01b031661107d565b34801561053457600080fd5b5061024a611098565b34801561054957600080fd5b5061024a6004803603602081101561056057600080fd5b503561113a565b34801561057357600080fd5b5061024a6004803603602081101561058a57600080fd5b503560ff166111b4565b3480156105a057600080fd5b5061026661127c565b3480156105b557600080fd5b506105be611295565b604080516001600160a01b039092168252519081900360200190f35b3480156105e657600080fd5b5061039a6112a4565b3480156105fb57600080fd5b5061028f6112aa565b34801561061057600080fd5b5061024a6112c9565b34801561062557600080fd5b5061024a61139e565b34801561063a57600080fd5b5061024a6004803603602081101561065157600080fd5b503561142b565b34801561066457600080fd5b5061024a6004803603604081101561067b57600080fd5b506001600160a01b0381351690602001356114c2565b34801561069d57600080fd5b5061024a600480360360608110156106b457600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156106e457600080fd5b8201836020820111156106f657600080fd5b8035906020019184600183028401116401000000008311171561071857600080fd5b50909250905061024c565b34801561072f57600080fd5b5061024a6107e5565b34801561074457600080fd5b5061039a6004803603604081101561075b57600080fd5b506001600160a01b038135811691602001351661157e565b34801561077f57600080fd5b5061024a6004803603602081101561079657600080fd5b50356115ab565b3480156107a957600080fd5b5061026661162a565b3480156107be57600080fd5b5061024a600480360360208110156107d557600080fd5b50356001600160a01b0316611643565b6107ed61162a565b15610838576006805460ff1916600117905560006007556040805142815290517ff82aa3c8d92a1044b702b0c9718bd99d353a4a85a215bdb4fe6c6a04b5f541e09181900360200190a15b565b61084261127c565b15610838576006805461ff00191661010017905560006008556040805142815290517f99424d4740b41446c45fa894e3dda8489b8ef8df8a37f8035f83053ed26485c19181900360200190a1565b6108986107e5565b6108a061083a565b600654610100900460ff16156108b557600080fd5b60065460ff166108c457600080fd5b346108ce57600080fd5b60006108e23461138863ffffffff61173c16565b905060006108fb8260005461179c90919063ffffffff16565b905060055461138801670de0b6b3a76400000281111561091a57600080fd5b60008181556001600160a01b038416815260016020526040902054610945908363ffffffff61179c16565b6001600160a01b038416600081815260016020908152604091829020939093558051428152349381019390935282810191909152517fd240e127ddfc99c27bdd1c45b264d1954a1e2bdb17a4c37e81586fd1412882619181900360600190a16004546040516001600160a01b03909116903480156108fc02916000818181858888f193505050506109d557600080fd5b505050565b60065460009060ff16806109f157506109f161162a565b8015610a135750600654610100900460ff1680610a115750610a1161127c565b155b905090565b6040518060400160405280601081526020016f26b0b1b937bb32b939b2902a37b5b2b760811b81525081565b8015801590610a7557503360009081526002602090815260408083206001600160a01b038616845290915290205415155b15610a7f57600080fd5b3360008181526002602090815260408083206001600160a01b03871680855290835292819020859055805185815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35050565b610ae96117f6565b6003546001600160a01b03908116911614610b39576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b610b4161083a565b600654610100900460ff1615610b5657600080fd5b6000600855565b610b656117f6565b6003546001600160a01b03908116911614610bb5576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b604080516370a0823160e01b8152306004820152905182916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610c0057600080fd5b505afa158015610c14573d6000803e3d6000fd5b505050506040513d6020811015610c2a57600080fd5b505190506001600160a01b03821663a9059cbb610c45611295565b836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610c9557600080fd5b505af1158015610ca9573d6000803e3d6000fd5b505050506040513d6020811015610cbf57600080fd5b5050505050565b60005481565b60606064361015610cdc57600080fd5b6001600160a01b03808516600090815260026020908152604080832033845282528083205493871683526001909152902054610d1e908463ffffffff61179c16565b6001600160a01b038086166000908152600160205260408082209390935590871681522054610d53908463ffffffff6117fa16565b6001600160a01b038616600090815260016020526040902055610d7c818463ffffffff6117fa16565b6001600160a01b03808716600081815260026020908152604080832033845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35050505050565b610dec6117f6565b6003546001600160a01b03908116911614610e3c576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b610e446107e5565b60065460ff1615610e5457600080fd5b6006805460ff1916600117905560006007556040805142815290517ff82aa3c8d92a1044b702b0c9718bd99d353a4a85a215bdb4fe6c6a04b5f541e09181900360200190a1565b610ea36117f6565b6003546001600160a01b03908116911614610ef3576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b806001600160a01b03811663f2fde38b610f0b611295565b6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050600060405180830381600087803b158015610f5357600080fd5b505af1158015610f67573d6000803e3d6000fd5b505050505050565b600354600160a01b900460ff1681565b60055481565b61138881565b60085481565b610f996117f6565b6003546001600160a01b03908116911614610fe9576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b610ff16107e5565b60065460ff161561100157600080fd5b6000600755565b6110106117f6565b6003546001600160a01b03908116911614611060576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b6110686107e5565b60065460ff161561107857600080fd5b600555565b6001600160a01b031660009081526001602052604090205490565b6110a06117f6565b6003546001600160a01b039081169116146110f0576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b6003546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380546001600160a01b0319169055565b6111426117f6565b6003546001600160a01b03908116911614611192576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b61119a6107e5565b60065460ff16156111aa57600080fd5b603c024201600755565b6111bc6117f6565b6003546001600160a01b0390811691161461120c576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b61121461083a565b600654610100900460ff1661122857600080fd5b6003805460ff8316600160a01b810260ff60a01b199092169190911790915560408051918252517fed6150ec960548590c920ded6ef554ec9e451dd7b4c85f62fb3760812cd72cf19181900360200190a150565b6000600854600014158015610a13575050600854421190565b6003546001600160a01b031690565b60075481565b6040518060400160405280600381526020016226a92b60e91b81525081565b6112d16117f6565b6003546001600160a01b03908116911614611321576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b6113296107e5565b61133161083a565b600654610100900460ff161561134657600080fd5b60065460ff1661135557600080fd5b6006805461ff00191661010017905560006008556040805142815290517f99424d4740b41446c45fa894e3dda8489b8ef8df8a37f8035f83053ed26485c19181900360200190a1565b6113a66117f6565b6003546001600160a01b039081169116146113f6576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b6113fe611295565b6001600160a01b03166108fc479081150290604051600060405180830381858888f1935050505061083857fe5b6001600160c01b0381111561143f57600080fd5b600054611452908263ffffffff61179c16565b600090815533815260016020526040902054611474908263ffffffff61179c16565b3360008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350565b604060443610156114d257600080fd5b336000908152600160205260409020546114f2908363ffffffff6117fa16565b33600090815260016020526040808220929092556001600160a01b03851681522054611524908363ffffffff61179c16565b6001600160a01b0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3505050565b6001600160a01b038083166000908152600260209081526040808320938516835292905220545b92915050565b6115b36117f6565b6003546001600160a01b03908116911614611603576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b61160b61083a565b600654610100900460ff161561162057600080fd5b603c024201600855565b6000600754600014158015610a13575050600754421190565b61164b6117f6565b6003546001600160a01b0390811691161461169b576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b6001600160a01b0381166116e05760405162461bcd60e51b81526004018080602001828103825260268152602001806118cf6026913960400191505060405180910390fd5b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b60008261174b575060006115a5565b8282028284828161175857fe5b04146117955760405162461bcd60e51b81526004018080602001828103825260218152602001806118f56021913960400191505060405180910390fd5b9392505050565b600082820183811015611795576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b600061179583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250600081848411156118c65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561188b578181015183820152602001611873565b50505050905090810190601f1680156118b85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212205d86ee95ea84172d7e2c5a73fa9c05def0dd345afb1a04ee52ea09cef9aaef6e64736f6c634300060a0033",
  "deployedBytecode": "0x6080604052600436106102085760003560e01c8063715018a6116101185780639f727c27116100a0578063dd3260fc1161006f578063dd3260fc14610723578063dd62ed3e14610738578063e330a73714610773578063ea6636311461079d578063f2fde38b146107b25761024c565b80639f727c2714610619578063a0712d681461062e578063a9059cbb14610658578063c0ee0b8a146106915761024c565b80638490d598116100e75780638490d5981461048c5780638da5cb5b146105a957806392f351f9146105da57806395d89b41146105ef578063983c0a01146106045761024c565b8063715018a61461052857806379d220ae1461053d5780637a1395aa1461056757806380f4531f146105945761024c565b806328ef6f401161019b5780634e15dfe91161016a5780634e15dfe91461048c5780635da24f90146104a15780636d6e2710146104b65780636f8b44b0146104cb57806370a08231146104f55761024c565b806328ef6f40146104045780632aed7f3f14610419578063313ce5671461044c578063346fc0dd146104775761024c565b806317ffc320116101d757806317ffc3201461035257806318160ddd146103855780631f4425f3146103ac57806323b872dd146103c15761024c565b80630118e6861461025157806306fdde031461027a578063095ea7b3146103045780630d051c521461033d5761024c565b3661024c576102156107e5565b61021d61083a565b600654610100900460ff161561023257600080fd5b60065460ff1661024157600080fd5b61024a33610890565b005b600080fd5b34801561025d57600080fd5b506102666109da565b604080519115158252519081900360200190f35b34801561028657600080fd5b5061028f610a18565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102c95781810151838201526020016102b1565b50505050905090810190601f1680156102f65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561031057600080fd5b5061024a6004803603604081101561032757600080fd5b506001600160a01b038135169060200135610a44565b34801561034957600080fd5b5061024a610ae1565b34801561035e57600080fd5b5061024a6004803603602081101561037557600080fd5b50356001600160a01b0316610b5d565b34801561039157600080fd5b5061039a610cc6565b60408051918252519081900360200190f35b3480156103b857600080fd5b5061024a61083a565b3480156103cd57600080fd5b5061024a600480360360608110156103e457600080fd5b506001600160a01b03813581169160208101359091169060400135610ccc565b34801561041057600080fd5b5061024a610de4565b34801561042557600080fd5b5061024a6004803603602081101561043c57600080fd5b50356001600160a01b0316610e9b565b34801561045857600080fd5b50610461610f6f565b6040805160ff9092168252519081900360200190f35b34801561048357600080fd5b5061039a610f7f565b34801561049857600080fd5b5061039a610f85565b3480156104ad57600080fd5b5061039a610f8b565b3480156104c257600080fd5b5061024a610f91565b3480156104d757600080fd5b5061024a600480360360208110156104ee57600080fd5b5035611008565b34801561050157600080fd5b5061039a6004803603602081101561051857600080fd5b50356001600160a01b031661107d565b34801561053457600080fd5b5061024a611098565b34801561054957600080fd5b5061024a6004803603602081101561056057600080fd5b503561113a565b34801561057357600080fd5b5061024a6004803603602081101561058a57600080fd5b503560ff166111b4565b3480156105a057600080fd5b5061026661127c565b3480156105b557600080fd5b506105be611295565b604080516001600160a01b039092168252519081900360200190f35b3480156105e657600080fd5b5061039a6112a4565b3480156105fb57600080fd5b5061028f6112aa565b34801561061057600080fd5b5061024a6112c9565b34801561062557600080fd5b5061024a61139e565b34801561063a57600080fd5b5061024a6004803603602081101561065157600080fd5b503561142b565b34801561066457600080fd5b5061024a6004803603604081101561067b57600080fd5b506001600160a01b0381351690602001356114c2565b34801561069d57600080fd5b5061024a600480360360608110156106b457600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156106e457600080fd5b8201836020820111156106f657600080fd5b8035906020019184600183028401116401000000008311171561071857600080fd5b50909250905061024c565b34801561072f57600080fd5b5061024a6107e5565b34801561074457600080fd5b5061039a6004803603604081101561075b57600080fd5b506001600160a01b038135811691602001351661157e565b34801561077f57600080fd5b5061024a6004803603602081101561079657600080fd5b50356115ab565b3480156107a957600080fd5b5061026661162a565b3480156107be57600080fd5b5061024a600480360360208110156107d557600080fd5b50356001600160a01b0316611643565b6107ed61162a565b15610838576006805460ff1916600117905560006007556040805142815290517ff82aa3c8d92a1044b702b0c9718bd99d353a4a85a215bdb4fe6c6a04b5f541e09181900360200190a15b565b61084261127c565b15610838576006805461ff00191661010017905560006008556040805142815290517f99424d4740b41446c45fa894e3dda8489b8ef8df8a37f8035f83053ed26485c19181900360200190a1565b6108986107e5565b6108a061083a565b600654610100900460ff16156108b557600080fd5b60065460ff166108c457600080fd5b346108ce57600080fd5b60006108e23461138863ffffffff61173c16565b905060006108fb8260005461179c90919063ffffffff16565b905060055461138801670de0b6b3a76400000281111561091a57600080fd5b60008181556001600160a01b038416815260016020526040902054610945908363ffffffff61179c16565b6001600160a01b038416600081815260016020908152604091829020939093558051428152349381019390935282810191909152517fd240e127ddfc99c27bdd1c45b264d1954a1e2bdb17a4c37e81586fd1412882619181900360600190a16004546040516001600160a01b03909116903480156108fc02916000818181858888f193505050506109d557600080fd5b505050565b60065460009060ff16806109f157506109f161162a565b8015610a135750600654610100900460ff1680610a115750610a1161127c565b155b905090565b6040518060400160405280601081526020016f26b0b1b937bb32b939b2902a37b5b2b760811b81525081565b8015801590610a7557503360009081526002602090815260408083206001600160a01b038616845290915290205415155b15610a7f57600080fd5b3360008181526002602090815260408083206001600160a01b03871680855290835292819020859055805185815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35050565b610ae96117f6565b6003546001600160a01b03908116911614610b39576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b610b4161083a565b600654610100900460ff1615610b5657600080fd5b6000600855565b610b656117f6565b6003546001600160a01b03908116911614610bb5576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b604080516370a0823160e01b8152306004820152905182916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610c0057600080fd5b505afa158015610c14573d6000803e3d6000fd5b505050506040513d6020811015610c2a57600080fd5b505190506001600160a01b03821663a9059cbb610c45611295565b836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610c9557600080fd5b505af1158015610ca9573d6000803e3d6000fd5b505050506040513d6020811015610cbf57600080fd5b5050505050565b60005481565b60606064361015610cdc57600080fd5b6001600160a01b03808516600090815260026020908152604080832033845282528083205493871683526001909152902054610d1e908463ffffffff61179c16565b6001600160a01b038086166000908152600160205260408082209390935590871681522054610d53908463ffffffff6117fa16565b6001600160a01b038616600090815260016020526040902055610d7c818463ffffffff6117fa16565b6001600160a01b03808716600081815260026020908152604080832033845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35050505050565b610dec6117f6565b6003546001600160a01b03908116911614610e3c576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b610e446107e5565b60065460ff1615610e5457600080fd5b6006805460ff1916600117905560006007556040805142815290517ff82aa3c8d92a1044b702b0c9718bd99d353a4a85a215bdb4fe6c6a04b5f541e09181900360200190a1565b610ea36117f6565b6003546001600160a01b03908116911614610ef3576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b806001600160a01b03811663f2fde38b610f0b611295565b6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050600060405180830381600087803b158015610f5357600080fd5b505af1158015610f67573d6000803e3d6000fd5b505050505050565b600354600160a01b900460ff1681565b60055481565b61138881565b60085481565b610f996117f6565b6003546001600160a01b03908116911614610fe9576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b610ff16107e5565b60065460ff161561100157600080fd5b6000600755565b6110106117f6565b6003546001600160a01b03908116911614611060576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b6110686107e5565b60065460ff161561107857600080fd5b600555565b6001600160a01b031660009081526001602052604090205490565b6110a06117f6565b6003546001600160a01b039081169116146110f0576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b6003546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380546001600160a01b0319169055565b6111426117f6565b6003546001600160a01b03908116911614611192576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b61119a6107e5565b60065460ff16156111aa57600080fd5b603c024201600755565b6111bc6117f6565b6003546001600160a01b0390811691161461120c576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b61121461083a565b600654610100900460ff1661122857600080fd5b6003805460ff8316600160a01b810260ff60a01b199092169190911790915560408051918252517fed6150ec960548590c920ded6ef554ec9e451dd7b4c85f62fb3760812cd72cf19181900360200190a150565b6000600854600014158015610a13575050600854421190565b6003546001600160a01b031690565b60075481565b6040518060400160405280600381526020016226a92b60e91b81525081565b6112d16117f6565b6003546001600160a01b03908116911614611321576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b6113296107e5565b61133161083a565b600654610100900460ff161561134657600080fd5b60065460ff1661135557600080fd5b6006805461ff00191661010017905560006008556040805142815290517f99424d4740b41446c45fa894e3dda8489b8ef8df8a37f8035f83053ed26485c19181900360200190a1565b6113a66117f6565b6003546001600160a01b039081169116146113f6576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b6113fe611295565b6001600160a01b03166108fc479081150290604051600060405180830381858888f1935050505061083857fe5b6001600160c01b0381111561143f57600080fd5b600054611452908263ffffffff61179c16565b600090815533815260016020526040902054611474908263ffffffff61179c16565b3360008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350565b604060443610156114d257600080fd5b336000908152600160205260409020546114f2908363ffffffff6117fa16565b33600090815260016020526040808220929092556001600160a01b03851681522054611524908363ffffffff61179c16565b6001600160a01b0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3505050565b6001600160a01b038083166000908152600260209081526040808320938516835292905220545b92915050565b6115b36117f6565b6003546001600160a01b03908116911614611603576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b61160b61083a565b600654610100900460ff161561162057600080fd5b603c024201600855565b6000600754600014158015610a13575050600754421190565b61164b6117f6565b6003546001600160a01b0390811691161461169b576040805162461bcd60e51b81526020600482018190526024820152600080516020611916833981519152604482015290519081900360640190fd5b6001600160a01b0381166116e05760405162461bcd60e51b81526004018080602001828103825260268152602001806118cf6026913960400191505060405180910390fd5b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b60008261174b575060006115a5565b8282028284828161175857fe5b04146117955760405162461bcd60e51b81526004018080602001828103825260218152602001806118f56021913960400191505060405180910390fd5b9392505050565b600082820183811015611795576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b600061179583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250600081848411156118c65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561188b578181015183820152602001611873565b50505050905090810190601f1680156118b85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212205d86ee95ea84172d7e2c5a73fa9c05def0dd345afb1a04ee52ea09cef9aaef6e64736f6c634300060a0033",
  "immutableReferences": {},
  "sourceMap": "156:926:27:-:0;;;4280:1:5;4256:25;;4434:1;4409:26;;317:248:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;317:248:27;;;;;;;;;891:17:30;911:12;-1:-1:-1;;;;;911:10:30;:12;:::i;:::-;933:6;:18;;-1:-1:-1;;;;;;933:18:30;-1:-1:-1;;;;;933:18:30;;;;;;;;966:43;;933:18;;-1:-1:-1;933:18:30;-1:-1:-1;;966:43:30;;-1:-1:-1;;966:43:30;-1:-1:-1;4777:11:5;:28;;-1:-1:-1;;;;;;4777:28:5;-1:-1:-1;;;;;4777:28:5;;;;;;4871:8;:13;;-1:-1:-1;;;;4871:13:5;-1:-1:-1;;;4871:13:5;;;4988:30;-1:-1:-1;4974:44:5;;;5028:22;;;;;-1:-1:-1;5028:22:5;;;;;;;;:36;;;5148:16;:24;;-1:-1:-1;;5182:22:5;;;5316:9;5282:31;:43;511:47:27;;;;;;;;::::1;::::0;::::1;::::0;;;;;;;;::::1;317:248:::0;;156:926;;616:104:29;703:10;616:104;:::o;156:926:27:-;;;;;;;",
  "deployedSourceMap": "156:926:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7501:16:5;:14;:16::i;:::-;7527:17;:15;:17::i;:::-;7558:14;;;;;;;7554:28;;;7574:8;;;7554:28;7597:16;;;;7592:31;;7615:8;;;7592:31;6109:24:::1;6122:10;6109:12;:24::i;:::-;156:926:27::0;;;;;8798:271:5;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;2977:48;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1298:523:23;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1298:523:23;;;;;;;;:::i;10900:101:5:-;;;;;;;;;;;;;:::i;786:207:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;786:207:4;-1:-1:-1;;;;;786:207:4;;:::i;174:26:22:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;8527:187:5;;;;;;;;;;;;;:::i;566:501:23:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;566:501:23;;;;;;;;;;;;;;;;;:::i;9465:155:5:-;;;;;;;;;;;;;:::i;517:166:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;517:166:2;-1:-1:-1;;;;;517:166:2;;:::i;3349:21:5:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3561:43;;;;;;;;;;;;;:::i;3779:45::-;;;;;;;;;;;;;:::i;4409:26::-;;;;;;;;;;;;;:::i;10288:99::-;;;;;;;;;;;;;:::i;9231:152::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9231:152:5;;:::i;1095:116:20:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1095:116:20;-1:-1:-1;;;;;1095:116:20;;:::i;1715:145:30:-;;;;;;;;;;;;;:::i;10015:150:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10015:150:5;;:::i;13376:215::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13376:215:5;;;;:::i;7971:117::-;;;;;;;;;;;;;:::i;1092:77:30:-;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;1092:77:30;;;;;;;;;;;;;;4256:25:5;;;;;;;;;;;;;:::i;3068:37::-;;;;;;;;;;;;;:::i;12652:159::-;;;;;;;;;;;;;:::i;13802:219::-;;;;;;;;;;;;;:::i;750:329:27:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;750:329:27;;:::i;654:239:20:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;654:239:20;;;;;;;;:::i;532:127:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;532:127:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;532:127:4;;-1:-1:-1;532:127:4;-1:-1:-1;532:127:4;:::i;8257:185:5:-;;;;;;;;;;;;;:::i;2136:145:23:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2136:145:23;;;;;;;;;;:::i;10634:152:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10634:152:5;;:::i;7774:114::-;;;;;;;;;;;;;:::i;2009:240:30:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2009:240:30;-1:-1:-1;;;;;2009:240:30;;:::i;8257:185:5:-;8304:18;:16;:18::i;:::-;8300:136;;;8338:16;:23;;-1:-1:-1;;8338:23:5;8357:4;8338:23;;;:16;8375:9;:13;8407:18;;;8421:3;8407:18;;;;;;;;;;;;;8300:136;8257:185::o;8527:187::-;8575:19;:17;:19::i;:::-;8571:137;;;8610:14;:21;;-1:-1:-1;;8610:21:5;;;;;;8645:10;:14;8678:19;;;8693:3;8678:19;;;;;;;;;;;;;8527:187::o;11266:1306::-;7501:16;:14;:16::i;:::-;7527:17;:15;:17::i;:::-;7558:14;;;;;;;7554:28;;;7574:8;;;7554:28;7597:16;;;;7592:31;;7615:8;;;7592:31;11350:9:::1;11346:53;;11380:8;::::0;::::1;11346:53;11409:11;11423:32;:9;3820:4;11423:32;:13;:32;:::i;:::-;11409:46;;11531:22;11556:23;11572:6;11556:11;;:15;;:23;;;;:::i;:::-;11531:48;;11642:31;;3716:4;11620:53;11677:8;11619:66;11602:14;:83;11598:234;;;11813:8;::::0;::::1;11598:234;12085:11;:28:::0;;;-1:-1:-1;;;;;12145:19:5;::::1;::::0;;:8:::1;:19;::::0;;;;;:31:::1;::::0;12169:6;12145:31:::1;:23;:31;:::i;:::-;-1:-1:-1::0;;;;;12123:19:5;::::1;;::::0;;;:8:::1;:19;::::0;;;;;;;;:53;;;;12233:40;;12247:3:::1;12233:40:::0;;12252:9:::1;12233:40:::0;;::::1;::::0;;;;;;;;;;;;::::1;::::0;;;;;;;::::1;12504:11;::::0;:27:::1;::::0;-1:-1:-1;;;;;12504:11:5;;::::1;::::0;12521:9:::1;12504:27:::0;::::1;;;::::0;:11:::1;:27:::0;:11;:27;12521:9;12504:11;:27;::::1;;;;;;12499:67;;12547:8;::::0;::::1;12499:67;7633:1;;11266:1306:::0;:::o;8798:271::-;8978:16;;8848:4;;8978:16;;;:38;;;8998:18;:16;:18::i;:::-;8977:84;;;;-1:-1:-1;9023:14:5;;;;;;;;:37;;;9041:19;:17;:19::i;:::-;9021:40;8977:84;8969:93;;8798:271;:::o;2977:48::-;;;;;;;;;;;;;;-1:-1:-1;;;2977:48:5;;;;:::o;1298:523:23:-;1665:11;;;;;1664:53;;-1:-1:-1;1690:10:23;1682:19;;;;:7;:19;;;;;;;;-1:-1:-1;;;;;1682:29:23;;;;;;;;;;:34;;1664:53;1660:67;;;1719:8;;;1660:67;1742:10;1734:19;;;;:7;:19;;;;;;;;-1:-1:-1;;;;;1734:29:23;;;;;;;;;;;;:38;;;1778;;;;;;;1734:29;;1742:10;1778:38;;;;;;;;;;;1298:523;;:::o;10900:101:5:-;1306:12:30;:10;:12::i;:::-;1296:6;;-1:-1:-1;;;;;1296:6:30;;;:22;;;1288:67;;;;;-1:-1:-1;;;1288:67:30;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1288:67:30;;;;;;;;;;;;;;;6804:17:5::1;:15;:17::i;:::-;6835:14;::::0;::::1;::::0;::::1;;;6831:28;;;6851:8;::::0;::::1;6831:28;10993:1:::2;10980:10;:14:::0;10900:101::o;786:207:4:-;1306:12:30;:10;:12::i;:::-;1296:6;;-1:-1:-1;;;;;1296:6:30;;;:22;;;1288:67;;;;;-1:-1:-1;;;1288:67:30;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1288:67:30;;;;;;;;;;;;;;;912:34:4::1;::::0;;-1:-1:-1;;;912:34:4;;940:4:::1;912:34;::::0;::::1;::::0;;;878:9;;852:16:::1;::::0;-1:-1:-1;;;;;912:19:4;::::1;::::0;::::1;::::0;:34;;;;;::::1;::::0;;;;;;;;:19;:34;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;912:34:4;;-1:-1:-1;;;;;;952:18:4;::::1;;971:7;:5;:7::i;:::-;980;952:36;;;;;;;;;;;;;-1:-1:-1::0;;;;;952:36:4::1;-1:-1:-1::0;;;;;952:36:4::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;;;;;786:207:4:o;174:26:22:-;;;;:::o;566:501:23:-;664:6;453:8:20;435;:26;432:56;;;472:8;;;432:56;-1:-1:-1;;;;;699:14:23;;::::1;678:18;699:14:::0;;;:7:::1;:14;::::0;;;;;;;714:10:::1;699:26:::0;;;;;;;;895:13;;::::1;::::0;;:8:::1;:13:::0;;;;;;:25:::1;::::0;913:6;895:25:::1;:17;:25;:::i;:::-;-1:-1:-1::0;;;;;879:13:23;;::::1;;::::0;;;:8:::1;:13;::::0;;;;;:41;;;;944:15;;::::1;::::0;;;;:27:::1;::::0;964:6;944:27:::1;:19;:27;:::i;:::-;-1:-1:-1::0;;;;;926:15:23;::::1;;::::0;;;:8:::1;:15;::::0;;;;:45;1006:22:::1;:10:::0;1021:6;1006:22:::1;:14;:22;:::i;:::-;-1:-1:-1::0;;;;;977:14:23;;::::1;;::::0;;;:7:::1;:14;::::0;;;;;;;992:10:::1;977:26:::0;;;;;;;;:51;;;;1034:28;;;;;;;;;::::1;::::0;977:14;;1034:28:::1;::::0;;;;;;;;;::::1;494:1:20;566:501:23::0;;;;:::o;9465:155:5:-;1306:12:30;:10;:12::i;:::-;1296:6;;-1:-1:-1;;;;;1296:6:30;;;:22;;;1288:67;;;;;-1:-1:-1;;;1288:67:30;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1288:67:30;;;;;;;;;;;;;;;7248:16:5::1;:14;:16::i;:::-;7278;::::0;::::1;;7274:30;;;7296:8;::::0;::::1;7274:30;9534:16:::2;:23:::0;;-1:-1:-1;;9534:23:5::2;9553:4;9534:23;::::0;;:16:::2;9567:9;:13:::0;9595:18:::2;::::0;;9609:3:::2;9595:18:::0;;;;::::2;::::0;;;;::::2;::::0;;::::2;9465:155::o:0;517:166:2:-;1306:12:30;:10;:12::i;:::-;1296:6;;-1:-1:-1;;;;;1296:6:30;;;:22;;;1288:67;;;;;-1:-1:-1;;;1288:67:30;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1288:67:30;;;;;;;;;;;;;;;620:12:2;-1:-1:-1;;;;;639:30:2;::::1;;670:7;:5;:7::i;:::-;639:39;;;;;;;;;;;;;-1:-1:-1::0;;;;;639:39:2::1;-1:-1:-1::0;;;;;639:39:2::1;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;1365:1:30;517:166:2::0;:::o;3349:21:5:-;;;-1:-1:-1;;;3349:21:5;;;;;:::o;3561:43::-;;;;:::o;3779:45::-;3820:4;3779:45;:::o;4409:26::-;;;;:::o;10288:99::-;1306:12:30;:10;:12::i;:::-;1296:6;;-1:-1:-1;;;;;1296:6:30;;;:22;;;1288:67;;;;;-1:-1:-1;;;1288:67:30;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1288:67:30;;;;;;;;;;;;;;;7248:16:5::1;:14;:16::i;:::-;7278;::::0;::::1;;7274:30;;;7296:8;::::0;::::1;7274:30;10379:1:::2;10367:9;:13:::0;10288:99::o;9231:152::-;1306:12:30;:10;:12::i;:::-;1296:6;;-1:-1:-1;;;;;1296:6:30;;;:22;;;1288:67;;;;;-1:-1:-1;;;1288:67:30;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1288:67:30;;;;;;;;;;;;;;;7248:16:5::1;:14;:16::i;:::-;7278;::::0;::::1;;7274:30;;;7296:8;::::0;::::1;7274:30;9323:31:::2;:53:::0;9231:152::o;1095:116:20:-;-1:-1:-1;;;;;1190:16:20;1160:15;1190:16;;;:8;:16;;;;;;;1095:116::o;1715:145:30:-;1306:12;:10;:12::i;:::-;1296:6;;-1:-1:-1;;;;;1296:6:30;;;:22;;;1288:67;;;;;-1:-1:-1;;;1288:67:30;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1288:67:30;;;;;;;;;;;;;;;1805:6:::1;::::0;1784:40:::1;::::0;1821:1:::1;::::0;-1:-1:-1;;;;;1805:6:30::1;::::0;1784:40:::1;::::0;1821:1;;1784:40:::1;1834:6;:19:::0;;-1:-1:-1;;;;;;1834:19:30::1;::::0;;1715:145::o;10015:150:5:-;1306:12:30;:10;:12::i;:::-;1296:6;;-1:-1:-1;;;;;1296:6:30;;;:22;;;1288:67;;;;;-1:-1:-1;;;1288:67:30;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1288:67:30;;;;;;;;;;;;;;;7248:16:5::1;:14;:16::i;:::-;7278;::::0;::::1;;7274:30;;;7296:8;::::0;::::1;7274:30;10149:9:::2;10132:26;10126:3;:32;10114:9;:44:::0;10015:150::o;13376:215::-;1306:12:30;:10;:12::i;:::-;1296:6;;-1:-1:-1;;;;;1296:6:30;;;:22;;;1288:67;;;;;-1:-1:-1;;;1288:67:30;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1288:67:30;;;;;;;;;;;;;;;7052:17:5::1;:15;:17::i;:::-;7084:14;::::0;::::1;::::0;::::1;;;7079:29;;7100:8;::::0;::::1;7079:29;13490:8:::2;:22:::0;;::::2;::::0;::::2;-1:-1:-1::0;;;13490:22:5;::::2;-1:-1:-1::0;;;;13490:22:5;;::::2;::::0;;;::::2;::::0;;;13558:26:::2;::::0;;;;;;::::2;::::0;;;;::::2;::::0;;::::2;13376:215:::0;:::o;7971:117::-;8021:4;8045:10;;8059:1;8045:15;;:35;;;;-1:-1:-1;;8070:10:5;;8064:3;:16;;7971:117::o;1092:77:30:-;1156:6;;-1:-1:-1;;;;;1156:6:30;1092:77;:::o;4256:25:5:-;;;;:::o;3068:37::-;;;;;;;;;;;;;;-1:-1:-1;;;3068:37:5;;;;:::o;12652:159::-;1306:12:30;:10;:12::i;:::-;1296:6;;-1:-1:-1;;;;;1296:6:30;;;:22;;;1288:67;;;;;-1:-1:-1;;;1288:67:30;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1288:67:30;;;;;;;;;;;;;;;7501:16:5::1;:14;:16::i;:::-;7527:17;:15;:17::i;:::-;7558:14;::::0;::::1;::::0;::::1;;;7554:28;;;7574:8;::::0;::::1;7554:28;7597:16;::::0;::::1;;7592:31;;7615:8;::::0;::::1;7592:31;12725:14:::2;:21:::0;;-1:-1:-1;;12725:21:5::2;;;::::0;;;12756:10:::2;:14:::0;12785:19:::2;::::0;;12800:3:::2;12785:19:::0;;;;::::2;::::0;;;;::::2;::::0;;::::2;12652:159::o:0;13802:219::-;1306:12:30;:10;:12::i;:::-;1296:6;;-1:-1:-1;;;;;1296:6:30;;;:22;;;1288:67;;;;;-1:-1:-1;;;1288:67:30;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1288:67:30;;;;;;;;;;;;;;;13976:7:5::1;:5;:7::i;:::-;-1:-1:-1::0;;;;;13960:30:5::1;:53;13991:21;13960:53;;;;;;;;;;;;;;;;;;;;;;;13953:61;;;750:329:27::0;-1:-1:-1;;;;;801:6:27;:75;797:114;;;892:8;;;797:114;934:11;;:23;;950:6;934:23;:15;:23;:::i;:::-;920:11;:37;;;999:10;990:20;;:8;:20;;;;;;:32;;1015:6;990:32;:24;:32;:::i;:::-;976:10;967:20;;;;:8;:20;;;;;;;;:55;;;;1032:40;;;;;;;976:10;;967:20;;1032:40;;;;;;;;;;750:329;:::o;654:239:20:-;733:6;453:8;435;:26;432:56;;;472:8;;;432:56;779:10:::1;770:20;::::0;;;:8:::1;:20;::::0;;;;;:32:::1;::::0;795:6;770:32:::1;:24;:32;:::i;:::-;756:10;747:20;::::0;;;:8:::1;:20;::::0;;;;;:55;;;;-1:-1:-1;;;;;824:13:20;::::1;::::0;;;;:25:::1;::::0;842:6;824:25:::1;:17;:25;:::i;:::-;-1:-1:-1::0;;;;;808:13:20;::::1;;::::0;;;:8:::1;:13;::::0;;;;;;;;:41;;;;855:33;;;;;;;808:13;;864:10:::1;::::0;855:33:::1;::::0;;;;;;;;::::1;654:239:::0;;;:::o;2136:145:23:-;-1:-1:-1;;;;;2251:15:23;;;2219:17;2251:15;;;:7;:15;;;;;;;;:25;;;;;;;;;;2136:145;;;;;:::o;10634:152:5:-;1306:12:30;:10;:12::i;:::-;1296:6;;-1:-1:-1;;;;;1296:6:30;;;:22;;;1288:67;;;;;-1:-1:-1;;;1288:67:30;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1288:67:30;;;;;;;;;;;;;;;6804:17:5::1;:15;:17::i;:::-;6835:14;::::0;::::1;::::0;::::1;;;6831:28;;;6851:8;::::0;::::1;6831:28;10770:9:::2;10753:26;10747:3;:32;10734:10;:45:::0;10634:152::o;7774:114::-;7823:4;7847:9;;7860:1;7847:14;;:33;;;;-1:-1:-1;;7871:9:5;;7865:3;:15;;7774:114::o;2009:240:30:-;1306:12;:10;:12::i;:::-;1296:6;;-1:-1:-1;;;;;1296:6:30;;;:22;;;1288:67;;;;;-1:-1:-1;;;1288:67:30;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1288:67:30;;;;;;;;;;;;;;;-1:-1:-1;;;;;2097:22:30;::::1;2089:73;;;;-1:-1:-1::0;;;2089:73:30::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2198:6;::::0;2177:38:::1;::::0;-1:-1:-1;;;;;2177:38:30;;::::1;::::0;2198:6:::1;::::0;2177:38:::1;::::0;2198:6:::1;::::0;2177:38:::1;2225:6;:17:::0;;-1:-1:-1;;;;;;2225:17:30::1;-1:-1:-1::0;;;;;2225:17:30;;;::::1;::::0;;;::::1;::::0;;2009:240::o;2206:459:33:-;2264:7;2505:6;2501:45;;-1:-1:-1;2534:1:33;2527:8;;2501:45;2568:5;;;2572:1;2568;:5;:1;2591:5;;;;;:10;2583:56;;;;-1:-1:-1;;;2583:56:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2657:1;2206:459;-1:-1:-1;;;2206:459:33:o;900:176::-;958:7;989:5;;;1012:6;;;;1004:46;;;;;-1:-1:-1;;;1004:46:33;;;;;;;;;;;;;;;;;;;;;;;;;;;616:104:29;703:10;616:104;:::o;1347:134:33:-;1405:7;1431:43;1435:1;1438;1431:43;;;;;;;;;;;;;;;;;1858:7;1893:12;1885:6;;;;1877:29;;;;-1:-1:-1;;;1877:29:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1928:5:33;;;1772:187::o",
  "source": "pragma solidity ^0.6.10;\n\nimport \"./MRVToken.sol\";\n\n/**\n * MRVToken contract which adds unrestricted minting by anyone.\n *\n * Only useful on a testnet.\n */\ncontract TestnetMRVToken is MRVToken {\n\n    /**\n     * Make a new TestnetMRVToken.\n     * Passes through arguments to the base MRVToken constructor.\n     */\n    constructor(address payable sendProceedsTo, address sendTokensTo) MRVToken(sendProceedsTo, sendTokensTo) public {\n        // Send the event we forget to send in the base implementation.\n        Transfer(address(0), sendTokensTo, totalSupply);\n    }\n\n   \n    /**\n     * Allow anyone to mint themselves any amount of tokens, for testing.\n     * Unless it's truly huge and going to DoS the contract by pegging total supply.\n     */\n    function mint(uint256 amount) public {\n        if (amount > 0x0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\n            revert();\n        }\n        totalSupply = totalSupply.add(amount);\n        balances[msg.sender] = balances[msg.sender].add(amount);\n        Transfer(address(0), msg.sender, amount);\n    }\n\n}\n\n// This code is part of Macroverse and is licensed: UNLICENSED\n",
  "sourcePath": "/home/anovak/workspace/macroverse/contracts/TestnetMRVToken.sol",
  "ast": {
    "absolutePath": "/home/anovak/workspace/macroverse/contracts/TestnetMRVToken.sol",
    "exportedSymbols": {
      "TestnetMRVToken": [
        10992
      ]
    },
    "id": 10993,
    "license": null,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10920,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".10"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:27"
      },
      {
        "absolutePath": "/home/anovak/workspace/macroverse/contracts/MRVToken.sol",
        "file": "./MRVToken.sol",
        "id": 10921,
        "nodeType": "ImportDirective",
        "scope": 10993,
        "sourceUnit": 725,
        "src": "26:24:27",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 10923,
              "name": "MRVToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 724,
              "src": "184:8:27",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MRVToken_$724",
                "typeString": "contract MRVToken"
              }
            },
            "id": 10924,
            "nodeType": "InheritanceSpecifier",
            "src": "184:8:27"
          }
        ],
        "contractDependencies": [
          97,
          202,
          724,
          8809,
          8849,
          8877,
          9021,
          11033,
          11142
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 10922,
          "nodeType": "StructuredDocumentation",
          "src": "52:103:27",
          "text": " MRVToken contract which adds unrestricted minting by anyone.\n Only useful on a testnet."
        },
        "fullyImplemented": true,
        "id": 10992,
        "linearizedBaseContracts": [
          10992,
          724,
          97,
          202,
          11142,
          11033,
          9021,
          8849,
          8809,
          8877
        ],
        "name": "TestnetMRVToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 10945,
              "nodeType": "Block",
              "src": "429:136:27",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 10939,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "528:1:27",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 10938,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "520:7:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 10937,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "520:7:27",
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            }
                          }
                        },
                        "id": 10940,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "520:10:27",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 10941,
                        "name": "sendTokensTo",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10929,
                        "src": "532:12:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 10942,
                        "name": "totalSupply",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8854,
                        "src": "546:11:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 10936,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8876,
                      "src": "511:8:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 10943,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "511:47:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10944,
                  "nodeType": "ExpressionStatement",
                  "src": "511:47:27"
                }
              ]
            },
            "documentation": {
              "id": 10925,
              "nodeType": "StructuredDocumentation",
              "src": "200:112:27",
              "text": " Make a new TestnetMRVToken.\n Passes through arguments to the base MRVToken constructor."
            },
            "id": 10946,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 10932,
                    "name": "sendProceedsTo",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10927,
                    "src": "392:14:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 10933,
                    "name": "sendTokensTo",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10929,
                    "src": "408:12:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 10934,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 10931,
                  "name": "MRVToken",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 724,
                  "src": "383:8:27",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_MRVToken_$724_$",
                    "typeString": "type(contract MRVToken)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "383:38:27"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 10930,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10927,
                  "mutability": "mutable",
                  "name": "sendProceedsTo",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10946,
                  "src": "329:30:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 10926,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "329:15:27",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10929,
                  "mutability": "mutable",
                  "name": "sendTokensTo",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10946,
                  "src": "361:20:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10928,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "361:7:27",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "328:54:27"
            },
            "returnParameters": {
              "id": 10935,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "429:0:27"
            },
            "scope": 10992,
            "src": "317:248:27",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10990,
              "nodeType": "Block",
              "src": "787:292:27",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 10954,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 10952,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10949,
                      "src": "801:6:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "307830303030303030303030303030303030464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646",
                      "id": 10953,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "810:66:27",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512895_by_1",
                        "typeString": "int_const 6277...(50 digits omitted)...2895"
                      },
                      "value": "0x0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                    },
                    "src": "801:75:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 10959,
                  "nodeType": "IfStatement",
                  "src": "797:114:27",
                  "trueBody": {
                    "id": 10958,
                    "nodeType": "Block",
                    "src": "878:33:27",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 10955,
                            "name": "revert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -19,
                              -19
                            ],
                            "referencedDeclaration": -19,
                            "src": "892:6:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 10956,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "892:8:27",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 10957,
                        "nodeType": "ExpressionStatement",
                        "src": "892:8:27"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 10965,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 10960,
                      "name": "totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8854,
                      "src": "920:11:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 10963,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10949,
                          "src": "950:6:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "id": 10961,
                          "name": "totalSupply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8854,
                          "src": "934:11:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 10962,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 11240,
                        "src": "934:15:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 10964,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "934:23:27",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "920:37:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 10966,
                  "nodeType": "ExpressionStatement",
                  "src": "920:37:27"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 10978,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 10967,
                        "name": "balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8729,
                        "src": "967:8:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 10970,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 10968,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "976:3:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 10969,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "976:10:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "967:20:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 10976,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10949,
                          "src": "1015:6:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 10971,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8729,
                            "src": "990:8:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 10974,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 10972,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "999:3:27",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 10973,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "999:10:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "990:20:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 10975,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 11240,
                        "src": "990:24:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 10977,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "990:32:27",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "967:55:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 10979,
                  "nodeType": "ExpressionStatement",
                  "src": "967:55:27"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 10983,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1049:1:27",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 10982,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1041:7:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 10981,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1041:7:27",
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            }
                          }
                        },
                        "id": 10984,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1041:10:27",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 10985,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1053:3:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 10986,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1053:10:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 10987,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10949,
                        "src": "1065:6:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 10980,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8876,
                      "src": "1032:8:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 10988,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1032:40:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10989,
                  "nodeType": "ExpressionStatement",
                  "src": "1032:40:27"
                }
              ]
            },
            "documentation": {
              "id": 10947,
              "nodeType": "StructuredDocumentation",
              "src": "575:170:27",
              "text": " Allow anyone to mint themselves any amount of tokens, for testing.\n Unless it's truly huge and going to DoS the contract by pegging total supply."
            },
            "functionSelector": "a0712d68",
            "id": 10991,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 10950,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10949,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10991,
                  "src": "764:14:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10948,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "764:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "763:16:27"
            },
            "returnParameters": {
              "id": 10951,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "787:0:27"
            },
            "scope": 10992,
            "src": "750:329:27",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 10993,
        "src": "156:926:27"
      }
    ],
    "src": "0:1147:27"
  },
  "legacyAST": {
    "absolutePath": "/home/anovak/workspace/macroverse/contracts/TestnetMRVToken.sol",
    "exportedSymbols": {
      "TestnetMRVToken": [
        10992
      ]
    },
    "id": 10993,
    "license": null,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10920,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".10"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:27"
      },
      {
        "absolutePath": "/home/anovak/workspace/macroverse/contracts/MRVToken.sol",
        "file": "./MRVToken.sol",
        "id": 10921,
        "nodeType": "ImportDirective",
        "scope": 10993,
        "sourceUnit": 725,
        "src": "26:24:27",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 10923,
              "name": "MRVToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 724,
              "src": "184:8:27",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MRVToken_$724",
                "typeString": "contract MRVToken"
              }
            },
            "id": 10924,
            "nodeType": "InheritanceSpecifier",
            "src": "184:8:27"
          }
        ],
        "contractDependencies": [
          97,
          202,
          724,
          8809,
          8849,
          8877,
          9021,
          11033,
          11142
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 10922,
          "nodeType": "StructuredDocumentation",
          "src": "52:103:27",
          "text": " MRVToken contract which adds unrestricted minting by anyone.\n Only useful on a testnet."
        },
        "fullyImplemented": true,
        "id": 10992,
        "linearizedBaseContracts": [
          10992,
          724,
          97,
          202,
          11142,
          11033,
          9021,
          8849,
          8809,
          8877
        ],
        "name": "TestnetMRVToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 10945,
              "nodeType": "Block",
              "src": "429:136:27",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 10939,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "528:1:27",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 10938,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "520:7:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 10937,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "520:7:27",
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            }
                          }
                        },
                        "id": 10940,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "520:10:27",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 10941,
                        "name": "sendTokensTo",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10929,
                        "src": "532:12:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 10942,
                        "name": "totalSupply",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8854,
                        "src": "546:11:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 10936,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8876,
                      "src": "511:8:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 10943,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "511:47:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10944,
                  "nodeType": "ExpressionStatement",
                  "src": "511:47:27"
                }
              ]
            },
            "documentation": {
              "id": 10925,
              "nodeType": "StructuredDocumentation",
              "src": "200:112:27",
              "text": " Make a new TestnetMRVToken.\n Passes through arguments to the base MRVToken constructor."
            },
            "id": 10946,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 10932,
                    "name": "sendProceedsTo",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10927,
                    "src": "392:14:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 10933,
                    "name": "sendTokensTo",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10929,
                    "src": "408:12:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 10934,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 10931,
                  "name": "MRVToken",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 724,
                  "src": "383:8:27",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_MRVToken_$724_$",
                    "typeString": "type(contract MRVToken)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "383:38:27"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 10930,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10927,
                  "mutability": "mutable",
                  "name": "sendProceedsTo",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10946,
                  "src": "329:30:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 10926,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "329:15:27",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10929,
                  "mutability": "mutable",
                  "name": "sendTokensTo",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10946,
                  "src": "361:20:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10928,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "361:7:27",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "328:54:27"
            },
            "returnParameters": {
              "id": 10935,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "429:0:27"
            },
            "scope": 10992,
            "src": "317:248:27",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10990,
              "nodeType": "Block",
              "src": "787:292:27",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 10954,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 10952,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10949,
                      "src": "801:6:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "307830303030303030303030303030303030464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646",
                      "id": 10953,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "810:66:27",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512895_by_1",
                        "typeString": "int_const 6277...(50 digits omitted)...2895"
                      },
                      "value": "0x0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                    },
                    "src": "801:75:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 10959,
                  "nodeType": "IfStatement",
                  "src": "797:114:27",
                  "trueBody": {
                    "id": 10958,
                    "nodeType": "Block",
                    "src": "878:33:27",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 10955,
                            "name": "revert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -19,
                              -19
                            ],
                            "referencedDeclaration": -19,
                            "src": "892:6:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 10956,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "892:8:27",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 10957,
                        "nodeType": "ExpressionStatement",
                        "src": "892:8:27"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 10965,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 10960,
                      "name": "totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8854,
                      "src": "920:11:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 10963,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10949,
                          "src": "950:6:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "id": 10961,
                          "name": "totalSupply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8854,
                          "src": "934:11:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 10962,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 11240,
                        "src": "934:15:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 10964,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "934:23:27",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "920:37:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 10966,
                  "nodeType": "ExpressionStatement",
                  "src": "920:37:27"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 10978,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 10967,
                        "name": "balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8729,
                        "src": "967:8:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 10970,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 10968,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "976:3:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 10969,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "976:10:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "967:20:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 10976,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10949,
                          "src": "1015:6:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 10971,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8729,
                            "src": "990:8:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 10974,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 10972,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "999:3:27",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 10973,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "999:10:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "990:20:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 10975,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 11240,
                        "src": "990:24:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 10977,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "990:32:27",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "967:55:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 10979,
                  "nodeType": "ExpressionStatement",
                  "src": "967:55:27"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 10983,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1049:1:27",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 10982,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1041:7:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 10981,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1041:7:27",
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            }
                          }
                        },
                        "id": 10984,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1041:10:27",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 10985,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1053:3:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 10986,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1053:10:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 10987,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10949,
                        "src": "1065:6:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 10980,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8876,
                      "src": "1032:8:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 10988,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1032:40:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10989,
                  "nodeType": "ExpressionStatement",
                  "src": "1032:40:27"
                }
              ]
            },
            "documentation": {
              "id": 10947,
              "nodeType": "StructuredDocumentation",
              "src": "575:170:27",
              "text": " Allow anyone to mint themselves any amount of tokens, for testing.\n Unless it's truly huge and going to DoS the contract by pegging total supply."
            },
            "functionSelector": "a0712d68",
            "id": 10991,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 10950,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10949,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10991,
                  "src": "764:14:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10948,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "764:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "763:16:27"
            },
            "returnParameters": {
              "id": 10951,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "787:0:27"
            },
            "scope": 10992,
            "src": "750:329:27",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 10993,
        "src": "156:926:27"
      }
    ],
    "src": "0:1147:27"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.10+commit.00c0fcaf.Emscripten.clang"
  },
  "networks": {
    "4": {
      "events": {
        "0xf82aa3c8d92a1044b702b0c9718bd99d353a4a85a215bdb4fe6c6a04b5f541e0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "name": "time",
              "type": "uint256",
              "internalType": "uint256"
            }
          ],
          "name": "CrowdsaleOpen",
          "type": "event"
        },
        "0xd240e127ddfc99c27bdd1c45b264d1954a1e2bdb17a4c37e81586fd141288261": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "name": "time",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "indexed": false,
              "name": "etherAmount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "indexed": false,
              "name": "from",
              "type": "address",
              "internalType": "address"
            }
          ],
          "name": "TokenPurchase",
          "type": "event"
        },
        "0x99424d4740b41446c45fa894e3dda8489b8ef8df8a37f8035f83053ed26485c1": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "name": "time",
              "type": "uint256",
              "internalType": "uint256"
            }
          ],
          "name": "CrowdsaleClose",
          "type": "event"
        },
        "0xed6150ec960548590c920ded6ef554ec9e451dd7b4c85f62fb3760812cd72cf1": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "name": "newDecimals",
              "type": "uint8",
              "internalType": "uint8"
            }
          ],
          "name": "DecimalChange",
          "type": "event"
        },
        "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "previousOwner",
              "type": "address",
              "internalType": "address"
            },
            {
              "indexed": true,
              "name": "newOwner",
              "type": "address",
              "internalType": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "from",
              "type": "address",
              "internalType": "address"
            },
            {
              "indexed": true,
              "name": "to",
              "type": "address",
              "internalType": "address"
            },
            {
              "indexed": false,
              "name": "value",
              "type": "uint256",
              "internalType": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "owner",
              "type": "address",
              "internalType": "address"
            },
            {
              "indexed": true,
              "name": "spender",
              "type": "address",
              "internalType": "address"
            },
            {
              "indexed": false,
              "name": "value",
              "type": "uint256",
              "internalType": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        }
      },
      "links": {},
      "address": "0x87669FEC14088890F3C8939774C88833D6c4Ad3b",
      "transactionHash": "0x3a8a2a4c11e88413ad6796e92e69b3f582f96295818f7f89211d9396d8841c6f"
    }
  },
  "schemaVersion": "3.3.1",
  "updatedAt": "2020-12-06T06:13:58.794Z",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "_owner": "address The address which owns the funds.",
          "_spender": "address The address which will spend the funds. return A uint256 specifing the amount of tokens still avaible for the spender."
        }
      },
      "approve(address,uint256)": {
        "details": "Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.",
        "params": {
          "_spender": "The address which will spend the funds.",
          "_value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "_owner": "The address to query the the balance of.  return An uint256 representing the amount owned by the passed address."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "reclaimContract(address)": {
        "details": "Reclaim ownership of Ownable contracts",
        "params": {
          "contractAddr": "The address of the Ownable to be reclaimed."
        }
      },
      "reclaimToken(address)": {
        "details": "Reclaim all IERC20 compatible tokens",
        "params": {
          "tokenAddr": "address The address of the token contract"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "tokenFallback(address,uint256,bytes)": {
        "details": "Reject all ERC23 compatible tokens"
      },
      "transfer(address,uint256)": {
        "details": "transfer token for a specified address",
        "params": {
          "_to": "The address to transfer to.",
          "_value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another",
        "params": {
          "_from": "address The address which you want to send tokens from",
          "_to": "address The address which you want to transfer to",
          "_value": "uint256 the amout of tokens to be transfered"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {
      "checkCloseTimer()": {
        "notice": "If the close timer has elapsed, stop the crowdsale."
      },
      "checkOpenTimer()": {
        "notice": "If the open timer has elapsed, start the crowdsale. Can be called by people, but also gets called when people try to contribute."
      },
      "clearCrowdsaleCloseTimer()": {
        "notice": "Let the owner stop the crowdsale close timer, as long as it has not yet expired."
      },
      "clearCrowdsaleOpenTimer()": {
        "notice": "Let the owner stop the crowdsale open timer, as long as the crowdsale has not yet opened."
      },
      "closeCrowdsale()": {
        "notice": "Allow the owner to end the crowdsale manually."
      },
      "closeTimerElapsed()": {
        "notice": "Determine if the crowdsale should close by timer."
      },
      "constructor": "Make a new TestnetMRVToken. Passes through arguments to the base MRVToken constructor.",
      "isCrowdsaleActive()": {
        "notice": "Determine if the crowdsale is currently happening."
      },
      "mint(uint256)": {
        "notice": "Allow anyone to mint themselves any amount of tokens, for testing. Unless it's truly huge and going to DoS the contract by pegging total supply."
      },
      "openCrowdsale()": {
        "notice": "Allow the owner to start the crowdsale manually."
      },
      "openTimerElapsed()": {
        "notice": "Determine if the crowdsale should open by timer."
      },
      "reclaimEther()": {
        "notice": "If Ether somehow manages to get into this contract, provide a way to get it out again. During normal crowdsale operation, ETH is immediately forwarded to the beneficiary."
      },
      "setCrowdsaleCloseTimerFor(uint256)": {
        "notice": "Let the owner start the timer for the crowdsale end. Counts from when the function is called, *not* from the start of the crowdsale. It is possible, but a bad idea, to set this before the open timer."
      },
      "setCrowdsaleOpenTimerFor(uint256)": {
        "notice": "Let the owner start the timer for the crowdsale start. Without further owner intervention, anyone will be able to open the crowdsale when the timer expires. Further calls will re-set the timer to count from the time the transaction is processed. The timer can be re-set after it has tripped, unless someone has already opened the crowdsale."
      },
      "setDecimals(uint8)": {
        "notice": "When the crowdsale is finished, the contract owner may adjust the decimal places for display purposes. This should work like a 10-to-1 split or reverse-split. The point of this mechanism is to keep the individual MRV tokens from getting inconveniently valuable or cheap. However, it relies on the contract owner taking the time to update the decimal place value. Note that this changes the decimals IMMEDIATELY with NO NOTICE to users."
      },
      "setMaxSupply(uint256)": {
        "notice": "Before the crowdsale opens, the max token count can be configured."
      }
    },
    "notice": "MRVToken contract which adds unrestricted minting by anyone. Only useful on a testnet."
  }
}